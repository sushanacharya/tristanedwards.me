!function(){"use strict";const e=["client/sweetalert.22a3acc7.js","client/Nav.a35638b9.js","client/blog.b87194cd.js","client/client.a830a789.js","client/3-things-web-developers-should-know-when-building-electron-apps.adc7a613.js","client/client.1313ddc2.js","client/announcing-sweetalert-2-0.74d897f2.js","client/index.bdc30ed3.js","client/BlogLayout.2b997f18.js","client/why-im-excited-about-glimmerjs.fb0e2d51.js"].concat(["service-worker-index.html",".DS_Store","CNAME","dracula.css","favicon.ico","fonts/proxima_nova_light.ttf","fonts/proxima_nova_semibold.ttf","global.css","images/.DS_Store","images/blog/.DS_Store","images/blog/electron/chrome-quit.png","images/blog/electron/cover.jpg","images/blog/electron/top-padding.png","images/blog/glimmer/bundlesize.png","images/blog/glimmer/cover.png","images/blog/glimmer/helloworld-1.png","images/blog/glimmer/helloworld-2.png","images/blog/glimmer/rowing-tomster.png","images/blog/glimmer/todo-1.png","images/blog/glimmer/todo-2.png","images/blog/glimmer/todo-3.gif","images/blog/glimmer/todo-4.png","images/blog/glimmer/todo-5.png","images/blog/sweetalert/1-0.gif","images/blog/sweetalert/alts.png","images/blog/sweetalert/cover.png","images/blog/sweetalert/logo.png","images/codespace_icon.png","images/codespace_screenshot.png","images/course_icons/.DS_Store","images/course_icons/ethereum.png","images/course_icons/phoenix.png","images/ludu_bg.png","images/safello_screenshots/.DS_Store","images/safello_screenshots/bitcoinse.jpg","images/safello_screenshots/buy.jpg","images/safello_screenshots/landing.png","images/social.jpg","images/top_bg.png","images/transition.svg","images/tristan.jpg","u/JarviOS.zip"]),s=new Set(e);self.addEventListener("install",s=>{s.waitUntil(caches.open("cache1599912932548").then(s=>s.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const s of e)"cache1599912932548"!==s&&await caches.delete(s);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const t=new URL(e.request.url);t.protocol.startsWith("http")&&(t.hostname===self.location.hostname&&t.port!==self.location.port||(t.host===self.location.host&&s.has(t.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1599912932548").then(async s=>{try{const t=await fetch(e.request);return s.put(e.request,t.clone()),t}catch(t){const o=await s.match(e.request);if(o)return o;throw t}}))))})}();
